using UnityEngine;

public class AudioManager : MonoBehaviour
{
    public static AudioManager Instance;

    [Header("Background Music")]
    [SerializeField] private AudioClip[] bgMusicClips; // M·∫£ng nh·∫°c n·ªÅn cho t·ª´ng level (index 0 cho Level 1, index 1 cho Level 2, ...)
    [SerializeField] private AudioSource bgMusicSource;

    [Header("Sound Effects")]
    [SerializeField] private AudioClip coinSound; // √Çm thanh khi c·ªông ti·ªÅn
    [SerializeField] private AudioClip clickLevelSound; // √Çm thanh khi click v√†o level
    [SerializeField] private AudioClip dragHexagonSound; // √Çm thanh khi k√©o kh·ªëi hexagon
    [SerializeField] private AudioClip mergeHexagonSound; // √Çm thanh khi c√°c kh·ªëi h·ª£p nh·∫•t
    [SerializeField] private AudioSource sfxSource; // AudioSource cho hi·ªáu ·ª©ng √¢m thanh

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject); // Gi·ªØ AudioManager t·ªìn t·∫°i qua c√°c scene
        }
        else
        {
            Destroy(gameObject);
            return;
        }

        // Kh·ªüi t·∫°o AudioSource n·∫øu ch∆∞a c√≥
        if (bgMusicSource == null)
        {
            bgMusicSource = gameObject.AddComponent<AudioSource>();
            bgMusicSource.loop = true;
        }
        if (sfxSource == null)
        {
            sfxSource = gameObject.AddComponent<AudioSource>();
        }
    }

    private void Start()
    {
        // Ph√°t nh·∫°c n·ªÅn cho Level 1 ban ƒë·∫ßu
        PlayBackgroundMusic(0);
    }

    // Ph√°t nh·∫°c n·ªÅn cho level hi·ªán t·∫°i
    public void PlayBackgroundMusic(int levelIndex)
    {
        if (levelIndex >= 0 && levelIndex < bgMusicClips.Length && bgMusicClips[levelIndex] != null)
        {
            bgMusicSource.clip = bgMusicClips[levelIndex];
            bgMusicSource.Play();
            Debug.Log($"üéµ ƒêang ph√°t nh·∫°c n·ªÅn cho Level {levelIndex + 1}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh·∫°c n·ªÅn cho Level {levelIndex + 1}!");
        }
    }

    // Ph√°t hi·ªáu ·ª©ng √¢m thanh cho c·ªông ti·ªÅn
    public void PlayCoinSound()
    {
        if (coinSound != null)
        {
            sfxSource.PlayOneShot(coinSound);
            Debug.Log("üí∞ Ph√°t √¢m thanh c·ªông ti·ªÅn");
        }
    }

    // Ph√°t hi·ªáu ·ª©ng √¢m thanh khi click v√†o level
    public void PlayClickLevelSound()
    {
        if (clickLevelSound != null)
        {
            sfxSource.PlayOneShot(clickLevelSound);
            Debug.Log("üëÜ Ph√°t √¢m thanh click level");
        }
    }

    // Ph√°t hi·ªáu ·ª©ng √¢m thanh khi k√©o kh·ªëi hexagon
    public void PlayDragHexagonSound()
    {
        if (dragHexagonSound != null)
        {
            sfxSource.PlayOneShot(dragHexagonSound);
            Debug.Log("üîÑ Ph√°t √¢m thanh k√©o kh·ªëi hexagon");
        }
    }

    // Ph√°t hi·ªáu ·ª©ng √¢m thanh khi c√°c kh·ªëi h·ª£p nh·∫•t
    public void PlayMergeHexagonSound()
    {
        if (mergeHexagonSound != null)
        {
            sfxSource.PlayOneShot(mergeHexagonSound);
            Debug.Log("üîó Ph√°t √¢m thanh h·ª£p nh·∫•t kh·ªëi hexagon");
        }
    }

    // T·∫Øt/m·ªü nh·∫°c n·ªÅn
    public void ToggleBackgroundMusic(bool isOn)
    {
        bgMusicSource.mute = !isOn;
        Debug.Log($"üé∂ Nh·∫°c n·ªÅn {(isOn ? "b·∫≠t" : "t·∫Øt")}");
    }

    // T·∫Øt/m·ªü hi·ªáu ·ª©ng √¢m thanh
    public void ToggleSoundEffects(bool isOn)
    {
        sfxSource.mute = !isOn;
        Debug.Log($"üîä Hi·ªáu ·ª©ng √¢m thanh {(isOn ? "b·∫≠t" : "t·∫Øt")}");
    }
}