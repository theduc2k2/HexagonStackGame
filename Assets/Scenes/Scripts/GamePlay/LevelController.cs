using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;
using System.Linq;

public class LevelController : MonoBehaviour
{
    public static LevelController Instance;

    [Header("Level Configuration")]
    public GameObject[] levels;
    public int currentLevel = 0;

    [Header("UI Elements")]
    public Button nextButton;
    [SerializeField] private GameObject levelCompletePanel;
    [SerializeField] private TextMeshProUGUI levelText;
    [SerializeField] private GameObject canvasGameplay;
    [SerializeField] private GameObject canvasMenuGame;

    private Animator panelAnimator;
    private bool isWaitingForNext = false;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
            Debug.Log("‚úÖ LevelController ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è M·ªôt instance kh√°c c·ªßa LevelController ƒë√£ t·ªìn t·∫°i, h·ªßy instance n√†y.");
            Destroy(gameObject);
            return;
        }
    }

    private void Start()
    {
        int selectedLevel = PlayerPrefs.GetInt("SelectedLevel", 1) - 1;
        currentLevel = Mathf.Clamp(selectedLevel, 0, levels.Length - 1);
        ActivateLevel(currentLevel);
        ScoreManager.Instance?.InitLevel();

        if (nextButton != null)
        {
            nextButton.onClick.AddListener(OnNextLevelButtonClicked);
            nextButton.gameObject.SetActive(false);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è NextButton ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
        }

        if (levelCompletePanel != null)
        {
            levelCompletePanel.SetActive(false);
            panelAnimator = levelCompletePanel.GetComponent<Animator>();
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è LevelCompletePanel ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
        }

        if (levelText != null)
        {
            levelText.gameObject.SetActive(true);
            UpdateLevelText();
            Debug.Log("‚úÖ levelText kh·ªüi t·∫°o v√† hi·ªÉn th·ªã: " + levelText.text);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è levelText ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
        }

        if (canvasGameplay != null)
        {
            canvasGameplay.SetActive(true);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è canvasGameplay ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
        }

        if (canvasMenuGame != null)
        {
            canvasMenuGame.SetActive(false);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è canvasMenuGame ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
        }
    }

    public void ActivateLevel(int levelIndex)
    {
        if (levelIndex < 0 || levelIndex >= levels.Length)
        {
            Debug.LogError($"‚ö†Ô∏è Level index {levelIndex + 1} ngo√†i ph·∫°m vi m·∫£ng levels!");
            return;
        }

        currentLevel = levelIndex;
        Debug.Log($"Activating Level {levelIndex + 1}");
        for (int i = 0; i < levels.Length; i++)
        {
            if (levels[i] != null)
            {
                levels[i].SetActive(i == levelIndex);
                Debug.Log($"Level {i + 1} set active: {i == levelIndex}");
            }
            else
            {
                Debug.LogError($"‚ö†Ô∏è Level {i + 1} trong m·∫£ng levels ch∆∞a ƒë∆∞·ª£c g√°n!");
            }
        }

        if (levelText != null)
        {
            levelText.gameObject.SetActive(true);
            UpdateLevelText();
            Debug.Log("‚úÖ levelText c·∫≠p nh·∫≠t trong ActivateLevel: " + levelText.text);
        }

        ScoreManager.Instance?.InitLevel();
        ResetLevelState();

        if (LevelManager.Instance != null)
        {
            LevelManager.Instance.SyncLevel(currentLevel);
            Debug.Log("‚úÖ ƒê√£ ƒë·ªìng b·ªô currentLevel v·ªõi LevelManager.");
        }
    }

    private void ResetLevelState()
    {
        GridCell[] gridCells = levels[currentLevel].GetComponentsInChildren<GridCell>();
        foreach (GridCell cell in gridCells)
        {
            if (cell.IsOccupied)
            {
                cell.ClearHexStack();
            }
        }
    }

    public void OnLevelCompleted()
    {
        if (levelCompletePanel == null || panelAnimator == null)
        {
            Debug.LogWarning("‚ö†Ô∏è LevelCompletePanel ho·∫∑c Animator ch∆∞a ƒë∆∞·ª£c g√°n!");
            return;
        }

        isWaitingForNext = true;

        levelCompletePanel.SetActive(true);
        panelAnimator.ResetTrigger("IdleNextLevel");
        panelAnimator.SetTrigger("NextLevel");

        StartCoroutine(HandleLevelCompleteUI());
    }

    private IEnumerator HandleLevelCompleteUI()
    {
        float duration = GetAnimationClipLength("NextLevel");
        yield return new WaitForSeconds(duration);

        if (panelAnimator != null)
        {
            panelAnimator.ResetTrigger("NextLevel");
            panelAnimator.SetTrigger("IdleNextLevel");
        }

        if (nextButton != null)
        {
            nextButton.gameObject.SetActive(true);
            if (levelText != null)
            {
                levelText.gameObject.SetActive(false);
                Debug.Log("‚úÖ levelText ·∫©n khi n√∫t Next Level xu·∫•t hi·ªán");
            }
        }
    }

    public void OnNextLevelButtonClicked()
    {
        if (!isWaitingForNext)
            return;

        isWaitingForNext = false;

        if (nextButton != null) nextButton.gameObject.SetActive(false);
        if (levelCompletePanel != null) levelCompletePanel.SetActive(false);

        currentLevel++;
        if (currentLevel < levels.Length)
        {
            ActivateLevel(currentLevel);
            int levelToUnlock = currentLevel + 1;
            PlayerPrefs.SetInt($"LevelUnlocked_{levelToUnlock}", 1);
            PlayerPrefs.Save();

            if (LevelManagerMenu.Instance != null)
            {
                LevelManagerMenu.Instance.UpdateLockState(currentLevel, false);
                Debug.Log($"üîì ƒê√£ m·ªü kh√≥a Level {levelToUnlock}");
            }
            else
            {
                Debug.LogWarning($"‚ö†Ô∏è LevelManagerMenu.Instance kh√¥ng t·ªìn t·∫°i khi m·ªü kh√≥a Level {levelToUnlock}!");
            }

            if (LevelManager.Instance != null)
            {
                LevelManager.Instance.SyncLevel(currentLevel);
                Debug.Log("‚úÖ ƒê√£ ƒë·ªìng b·ªô currentLevel v·ªõi LevelManager sau khi nh·∫•n Next.");
            }
        }
        else
        {
            Debug.Log("üéâ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c m√†n!");
            currentLevel = levels.Length - 1;
            if (levelText != null)
            {
                levelText.gameObject.SetActive(true);
                UpdateLevelText();
                Debug.Log("‚úÖ levelText hi·ªÉn th·ªã khi ho√†n th√†nh t·∫•t c·∫£: " + levelText.text);
            }
        }
    }

    public void SwitchToMenu()
    {
        if (canvasGameplay != null) canvasGameplay.SetActive(false);
        if (canvasMenuGame != null) canvasMenuGame.SetActive(true);
        Debug.Log("‚úÖ ƒê√£ chuy·ªÉn sang Canvas Menu Game");
    }

    public void SwitchToGameplay()
    {
        if (canvasMenuGame != null) canvasMenuGame.SetActive(false);
        if (canvasGameplay != null) canvasGameplay.SetActive(true);
        Debug.Log("‚úÖ ƒê√£ chuy·ªÉn v·ªÅ Canvas Gameplay");
    }

    public void InitFirstLevel()
    {
        currentLevel = 0;
        ActivateLevel(currentLevel);
        if (levelText != null)
        {
            levelText.gameObject.SetActive(true);
            UpdateLevelText();
        }
    }

    private float GetAnimationClipLength(string clipName)
    {
        if (panelAnimator == null || panelAnimator.runtimeAnimatorController == null)
            return 1f;

        foreach (AnimationClip clip in panelAnimator.runtimeAnimatorController.animationClips)
        {
            if (clip != null && clip.name == clipName)
                return clip.length;
        }

        return 1f;
    }

    public void CheckGameOver(bool isMerged)
    {
        GridCell[] gridCells = levels[currentLevel].GetComponentsInChildren<GridCell>();
        bool allOccupied = gridCells.All(cell => cell.IsOccupied);
        int currentScore = ScoreManager.Instance?.CurrentScore ?? 0;
        int targetScore = ScoreManager.Instance?.GetTargetScore() ?? 0;

        Debug.Log($"üîç CheckGameOver - AllOccupied: {allOccupied}, IsMerged: {isMerged}, Score: {currentScore}/{targetScore}");
        Debug.Log($"Total GridCells: {gridCells.Length}, Occupied: {gridCells.Count(cell => cell.IsOccupied)}");

        if (allOccupied && !isMerged && currentScore < targetScore)
        {
            Debug.Log("‚ùå GAME OVER: T·∫•t c·∫£ √¥ ƒë√£ b·ªã chi·∫øm, kh√¥ng c√≥ h·ª£p nh·∫•t m·ªõi v√† ch∆∞a ƒë·∫°t ƒëi·ªÉm m·ª•c ti√™u!");
            if (LevelManager.Instance != null)
            {
                LevelManager.Instance.OnLevelFailed();
            }
            else
            {
                Debug.LogError("‚ö†Ô∏è LevelManager.Instance ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
            }
        }
    }

    private void UpdateLevelText()
    {
        if (levelText != null)
        {
            levelText.text = "Level: " + (currentLevel + 1);
            Debug.Log("‚úÖ UpdateLevelText g·ªçi, hi·ªÉn th·ªã: " + levelText.text);
        }
    }
}