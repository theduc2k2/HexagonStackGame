using UnityEngine;
using UnityEngine.UI;

public class LevelManagerMenu : MonoBehaviour
{
    [System.Serializable]
    public class LevelButtonData
    {
        public Button levelButton;  // N√∫t button cho level
        public Image lockImage;     // ·∫¢nh kh√≥a ri√™ng bi·ªát (GameObject con trong Button)
    }

    [Header("Level Buttons and Locks")]
    [SerializeField] private LevelButtonData[] levelButtonsData; // Danh s√°ch c·∫∑p button v√† ·∫£nh kh√≥a

    private bool isLoading = false; // Bi·∫øn ki·ªÉm so√°t ƒë·ªÉ tr√°nh t·∫£i scene nhi·ªÅu l·∫ßn

    public static LevelManagerMenu Instance { get; private set; }

    private void Awake()
    {
        // Reset tr·∫°ng th√°i khi play trong Editor ƒë·ªÉ test, nh∆∞ng gi·ªØ nguy√™n khi build
#if UNITY_EDITOR
        PlayerPrefs.DeleteAll();
        PlayerPrefs.SetInt("LevelUnlocked_1", 1); // M·∫∑c ƒë·ªãnh m·ªü Level 1
        for (int i = 2; i <= levelButtonsData.Length; i++)
        {
            PlayerPrefs.SetInt($"LevelUnlocked_{i}", 0); // Kh√≥a c√°c level t·ª´ 2 tr·ªü l√™n
        }
        PlayerPrefs.Save();
#endif

        // G√°n Instance
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
            return;
        }
    }

    private void Start()
    {
        // In tr·∫°ng th√°i PlayerPrefs ƒë·ªÉ ki·ªÉm tra
        for (int i = 1; i <= levelButtonsData.Length; i++)
        {
            Debug.Log($"LevelUnlocked_{i}: {PlayerPrefs.GetInt($"LevelUnlocked_{i}", i == 1 ? 1 : 0)}");
        }

        // G√°n s·ª± ki·ªán onClick v√† ki·ªÉm tra tr·∫°ng th√°i kh√≥a cho t·ª´ng n√∫t level
        for (int i = 0; i < levelButtonsData.Length; i++)
        {
            int levelIndex = i + 1; // Level 1-based
            if (levelButtonsData[i].levelButton != null)
            {
                int buttonIndex = i; // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ closure
                levelButtonsData[buttonIndex].levelButton.onClick.AddListener(() => LoadLevel(buttonIndex + 1));
                Debug.Log($"Button Level {levelIndex} ƒë∆∞·ª£c g√°n s·ª± ki·ªán, interactable: {levelButtonsData[buttonIndex].levelButton.interactable}");

                // Ki·ªÉm tra v√† √°p d·ª•ng tr·∫°ng th√°i kh√≥a
                bool isUnlocked = PlayerPrefs.GetInt($"LevelUnlocked_{levelIndex}", levelIndex == 1 ? 1 : 0) == 1;
                UpdateLockState(buttonIndex, !isUnlocked);
            }
            else
            {
                Debug.LogWarning($"‚ö†Ô∏è Button cho Level {i + 1} ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
            }
        }
    }

    private void LoadLevel(int levelIndex)
    {
        if (isLoading)
        {
            Debug.LogWarning("‚è≥ ƒêang t·∫£i, kh√¥ng th·ªÉ chuy·ªÉn level!");
            return;
        }

        // Ki·ªÉm tra xem level c√≥ ƒë∆∞·ª£c m·ªü kh√≥a kh√¥ng
        bool isUnlocked = PlayerPrefs.GetInt($"LevelUnlocked_{levelIndex}", levelIndex == 1 ? 1 : 0) == 1;
        Debug.Log($"Level {levelIndex} isUnlocked: {isUnlocked}");
        if (!isUnlocked)
        {
            Debug.LogWarning($"‚ö†Ô∏è Level {levelIndex} v·∫´n b·ªã kh√≥a!");
            return;
        }

        isLoading = true;
        Debug.Log($"Attempting to load Level {levelIndex}");

        if (LevelController.Instance != null)
        {
            // Ki·ªÉm tra xem levelIndex c√≥ h·ª£p l·ªá v√† ch·ªâ t·∫£i n·∫øu ƒë√£ m·ªü kh√≥a
            if (levelIndex - 1 >= 0 && levelIndex - 1 < LevelController.Instance.levels.Length)
            {
                LevelController.Instance.currentLevel = levelIndex - 1; // Chuy·ªÉn t·ª´ 1-based sang 0-based
                LevelController.Instance.ActivateLevel(levelIndex - 1);
                LevelController.Instance.SwitchToGameplay();
                Debug.Log($"‚úÖ ƒê√£ ch·ªçn v√† k√≠ch ho·∫°t Level {levelIndex} t·ª´ menu");
                PlayerPrefs.SetInt("SelectedLevel", levelIndex); // L∆∞u level ƒë∆∞·ª£c ch·ªçn
                PlayerPrefs.Save();
            }
            else
            {
                Debug.LogError($"‚ö†Ô∏è Level index {levelIndex} ngo√†i ph·∫°m vi m·∫£ng levels!");
            }
        }
        else
        {
            Debug.LogError("‚ö†Ô∏è LevelController.Instance kh√¥ng t·ªìn t·∫°i!");
        }

        isLoading = false;
    }

    public void UpdateLockState(int buttonIndex, bool isLocked)
    {
        if (buttonIndex >= 0 && buttonIndex < levelButtonsData.Length)
        {
            if (levelButtonsData[buttonIndex].levelButton != null && levelButtonsData[buttonIndex].lockImage != null)
            {
                levelButtonsData[buttonIndex].lockImage.enabled = isLocked; // ·∫®n/hi·ªán ·∫£nh kh√≥a ri√™ng bi·ªát
                levelButtonsData[buttonIndex].levelButton.interactable = !isLocked; // V√¥ hi·ªáu h√≥a button n·∫øu kh√≥a
                Debug.Log($"üîí C·∫≠p nh·∫≠t tr·∫°ng th√°i Level {buttonIndex + 1}: {(isLocked ? "ƒê√£ kh√≥a" : "ƒê√£ m·ªü")}, Interactable: {levelButtonsData[buttonIndex].levelButton.interactable}");
            }
            else
            {
                Debug.LogWarning($"‚ö†Ô∏è Lock Image ho·∫∑c Button cho Level {buttonIndex + 1} ch∆∞a ƒë∆∞·ª£c g√°n trong Inspector!");
            }
        }
        else
        {
            Debug.LogError($"‚ö†Ô∏è ButtonIndex {buttonIndex} ngo√†i ph·∫°m vi m·∫£ng levelButtonsData!");
        }
    }
}